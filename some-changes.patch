diff --git a/.env b/.env
index 366296e..a55fae7 100644
--- a/.env
+++ b/.env
@@ -1,10 +1,10 @@
-DB_HOST=ep-rough-art-52767763-pooler.ap-southeast-1.postgres.vercel-storage.com
-DB_PORT=5432
-DB_NAME=verceldb
-DB_USER=default
-DB_PASSWORD=bXD9eqRulL8H
-# DB_HOST=localhost
+# DB_HOST=ep-rough-art-52767763-pooler.ap-southeast-1.postgres.vercel-storage.com
 # DB_PORT=5432
-# DB_NAME=ojt07
-# DB_USER=postgres
-# DB_PASSWORD=root
\ No newline at end of file
+# DB_NAME=verceldb
+# DB_USER=default
+# DB_PASSWORD=bXD9eqRulL8H
+DB_HOST=localhost
+DB_PORT=5432
+DB_NAME=ojt07
+DB_USER=postgres
+DB_PASSWORD=root
\ No newline at end of file
diff --git a/package.json b/package.json
index e121df9..768f299 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,4 @@
 {
-  "name": "be-ojt-07",
   "name": "be-ojt-07",
   "version": "0.0.1",
   "description": "",
@@ -37,11 +36,13 @@
     "class-validator": "^0.14.0",
     "cls-hooked": "^4.2.2",
     "date-fns": "^2.30.0",
+    "docxtemplater": "^3.42.4",
     "nestjs-class-validator": "^0.1.2",
     "passport": "^0.6.0",
     "passport-jwt": "^4.0.1",
     "passport-local": "^1.0.0",
     "pg": "^8.11.2",
+    "pizzip": "^3.1.4",
     "reflect-metadata": "^0.1.13",
     "rxjs": "^7.8.1",
     "typeorm": "^0.3.17"
diff --git a/src/common/db/db.module.ts b/src/common/db/db.module.ts
index 6bfcc2b..21387de 100644
--- a/src/common/db/db.module.ts
+++ b/src/common/db/db.module.ts
@@ -15,9 +15,9 @@ import { TypeOrmModule } from '@nestjs/typeorm';
         password: configService.get('DB_PASSWORD'),
         entities: [__dirname + './../../entities/*{.ts,.js}'],
         synchronize: true,
-        ssl: {
-          rejectUnauthorized: false,
-        },
+        // ssl: {
+        //   rejectUnauthorized: false,
+        // },
       }),
       inject: [ConfigService],
     }),
diff --git a/src/entities/employee.entity.ts b/src/entities/employee.entity.ts
index 0d5735f..d5adbc5 100644
--- a/src/entities/employee.entity.ts
+++ b/src/entities/employee.entity.ts
@@ -1,5 +1,5 @@
-import { GenderEnum, PositionEnum, StatusEnum } from 'src/common/enum/enums';
 import { AbstractEntity } from 'src/common/entities/abstract.entity';
+import { GenderEnum, PositionEnum, StatusEnum } from 'src/common/enum/enums';
 import {
   Column,
   Entity,
@@ -62,9 +62,18 @@ export class Employee extends AbstractEntity {
   @Column('json', { nullable: true })
   skills: { name: string; exp: number }[];
 
-  @Column({ nullable: false })
+  @Column({ nullable: true })
   description: string;
 
+  @Column({ nullable: true })
+  address: string;
+
+  @Column('json', { nullable: true })
+  langFrame: { name: string }[];
+
+  @Column('json', { nullable: true })
+  tech: { name: string }[];
+
   @Column({ nullable: false })
   joinDate: Date;
 
diff --git a/src/modules/employee/employee.controller.ts b/src/modules/employee/employee.controller.ts
index 1fabeb1..189195a 100644
--- a/src/modules/employee/employee.controller.ts
+++ b/src/modules/employee/employee.controller.ts
@@ -1,19 +1,19 @@
 import {
+  Body,
   Controller,
+  Delete,
   Get,
-  Post,
-  Body,
-  Patch,
   Param,
-  Delete,
+  Patch,
+  Post,
   Query,
+  ValidationPipe,
 } from '@nestjs/common';
-import { EmployeeService } from './employee.service';
 import { CreateEmployeeDto } from './dto/create-employee.dto';
-import { UpdateEmployeeDto } from './dto/update-employee.dto';
 import { GetEmployeeParams } from './dto/getList_employee.dto';
-import { ValidationPipe } from '@nestjs/common';
 import { GetManagers } from './dto/getManager.dto';
+import { UpdateEmployeeDto } from './dto/update-employee.dto';
+import { EmployeeService } from './employee.service';
 
 @Controller('employee')
 export class EmployeeController {
@@ -27,6 +27,11 @@ export class EmployeeController {
     return { result, message: 'Successfully create new employee' };
   }
 
+  @Post('cv')
+  generateCv(@Body('id') id: string) {
+    return this.employeeService.generateCv(id);
+  }
+
   @Get('total')
   getTotalEmployee(@Query('period') period: string) {
     return this.employeeService.getTotalEmployee(period);
diff --git a/src/modules/employee/employee.service.ts b/src/modules/employee/employee.service.ts
index 14a7fbf..78dbb5f 100644
--- a/src/modules/employee/employee.service.ts
+++ b/src/modules/employee/employee.service.ts
@@ -1,16 +1,20 @@
-import { ConflictException, Injectable } from '@nestjs/common';
-import { UpdateEmployeeDto } from './dto/update-employee.dto';
-import { EntityManager, Repository } from 'typeorm';
-import { Employee } from 'src/entities/employee.entity';
+import { BadRequestException, Injectable } from '@nestjs/common';
 import { InjectRepository } from '@nestjs/typeorm';
+import Docxtemplater from 'docxtemplater';
+import * as fs from 'fs';
+import path from 'path';
+import PizZip from 'pizzip';
 import { PageMetaDto } from 'src/common/dtos/pageMeta';
 import { ResponsePaginate } from 'src/common/dtos/responsePaginate';
-import { GetEmployeeParams } from './dto/getList_employee.dto';
 import { Order } from 'src/common/enum/enums';
-import { CreateEmployeeDto } from './dto/create-employee.dto';
-import { Project } from 'src/entities/project.entity';
+import { Employee } from 'src/entities/employee.entity';
 import { EmployeeProject } from 'src/entities/employee_project.entity';
+import { Project } from 'src/entities/project.entity';
+import { EntityManager, Repository } from 'typeorm';
+import { CreateEmployeeDto } from './dto/create-employee.dto';
+import { GetEmployeeParams } from './dto/getList_employee.dto';
 import { GetManagers } from './dto/getManager.dto';
+import { UpdateEmployeeDto } from './dto/update-employee.dto';
 
 @Injectable()
 export class EmployeeService {
@@ -23,6 +27,87 @@ export class EmployeeService {
     private readonly assignsRepository: Repository<EmployeeProject>,
     private readonly entityManager: EntityManager,
   ) {}
+
+  async generateCv(id: string) {
+    const { employee } = await this.getEmployeeById(id);
+    const dataDocx = {
+      name: employee.name,
+      address: employee.address,
+      email: employee.email,
+      date: `${new Date(employee.createdAt).getMonth() + 1}/${new Date(
+        employee.createdAt,
+      ).getFullYear()}`,
+      lang_frame:
+        employee.langFrame
+          ?.map(function (item) {
+            return (
+              (item as unknown as string).charAt(0).toUpperCase() +
+              (item as unknown as string).slice(1).toLowerCase()
+            );
+          })
+          .join(', ') ?? '',
+      technical:
+        employee.tech
+          ?.map(function (item) {
+            return (
+              (item as unknown as string).charAt(0).toUpperCase() +
+              (item as unknown as string).slice(1).toLowerCase()
+            );
+          })
+          .join(', ') ?? '',
+      projects: employee.employee_project.map((item) => {
+        return {
+          project_name: item.project.name,
+          role: item.roles
+            .map(
+              (item) =>
+                item.charAt(0).toUpperCase() + item.slice(1).toLowerCase(),
+            )
+            .join(', '),
+          description: item.project.description,
+          specification: item.project.specification,
+          lang_frame_project:
+            item.project.langFrame
+              .map(
+                (item) =>
+                  (item as unknown as string)?.charAt(0).toUpperCase() +
+                  (item as unknown as string)?.slice(1).toLowerCase(),
+              )
+              .join(', ') ?? '',
+          tech_project:
+            item.project.technology
+              .map(
+                (item) =>
+                  (item as unknown as string)?.charAt(0).toUpperCase() +
+                  (item as unknown as string)?.slice(1).toLowerCase(),
+              )
+              .join(', ') ?? '',
+        };
+      }),
+      skills: employee.skills.map((item) => {
+        return {
+          name: item.name,
+          exp: item.exp,
+        };
+      }),
+    };
+
+    // console.log(dataDocx);
+    // return employee;
+    const content = fs.readFileSync(path.resolve('template2.docx'), 'binary');
+    const zip = new PizZip(content);
+    const doc = new Docxtemplater(zip, {
+      paragraphLoop: true,
+      linebreaks: true,
+    });
+    doc.render(dataDocx);
+    const buf = doc.getZip().generate({
+      type: 'nodebuffer',
+      compression: 'DEFLATE',
+    });
+    fs.writeFileSync(path.resolve('output.docx'), buf);
+  }
+
   async create(createEmployeeDto: CreateEmployeeDto) {
     const existingEmployee = await this.employeesRepository.findOne({
       where: [
@@ -33,11 +118,11 @@ export class EmployeeService {
 
     if (existingEmployee) {
       if (existingEmployee.code === createEmployeeDto.code) {
-        throw new ConflictException(
+        throw new BadRequestException(
           `Employee with code ${createEmployeeDto.code} already exists.`,
         );
       } else if (existingEmployee.email === createEmployeeDto.email) {
-        throw new ConflictException(
+        throw new BadRequestException(
           `Employee with email ${createEmployeeDto.email} already exists.`,
         );
       }
diff --git a/src/modules/project/dto/create-project.dto.ts b/src/modules/project/dto/create-project.dto.ts
index a5a250a..27bc56f 100644
--- a/src/modules/project/dto/create-project.dto.ts
+++ b/src/modules/project/dto/create-project.dto.ts
@@ -1,4 +1,4 @@
-import { IsNotEmpty, IsDate } from 'class-validator';
+import { IsDate, IsNotEmpty } from 'class-validator';
 import { StatusProjectEnum } from 'src/common/enum/enums';
 import { CreateAssignDto } from 'src/modules/assign/dto/create-assign.dto';
 
diff --git a/src/modules/project/project.service.ts b/src/modules/project/project.service.ts
index 60a62d2..8c859d2 100644
--- a/src/modules/project/project.service.ts
+++ b/src/modules/project/project.service.ts
@@ -1,15 +1,15 @@
 import { Injectable, NotFoundException } from '@nestjs/common';
-import { CreateProjectDto } from './dto/create-project.dto';
-import { UpdateProjectDto } from './dto/update-project.dto';
-import { EntityManager, Repository } from 'typeorm';
-import { Project } from '../../entities/project.entity';
 import { InjectRepository } from '@nestjs/typeorm';
-import { GetProjectParams } from './dto/getList-project.dto';
-import { Order, StatusProjectEnum } from 'src/common/enum/enums';
 import { PageMetaDto } from 'src/common/dtos/pageMeta';
 import { ResponsePaginate } from 'src/common/dtos/responsePaginate';
+import { Order, StatusProjectEnum } from 'src/common/enum/enums';
 import { Employee } from 'src/entities/employee.entity';
 import { EmployeeProject } from 'src/entities/employee_project.entity';
+import { EntityManager, Repository } from 'typeorm';
+import { Project } from '../../entities/project.entity';
+import { CreateProjectDto } from './dto/create-project.dto';
+import { GetProjectParams } from './dto/getList-project.dto';
+import { UpdateProjectDto } from './dto/update-project.dto';
 
 @Injectable()
 export class ProjectService {
@@ -292,6 +292,7 @@ export class ProjectService {
 
       const tracking = projectEmployeesWithDeletedAt.map(
         (projectEmployee: EmployeeProject) => ({
+          id: projectEmployee.employee.id,
           employeeName: projectEmployee.employee?.name,
           roles: projectEmployee.roles,
           joinDate: projectEmployee.joinDate,
diff --git a/tsconfig.json b/tsconfig.json
index 95f5641..5485d9d 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -16,6 +16,7 @@
     "noImplicitAny": false,
     "strictBindCallApply": false,
     "forceConsistentCasingInFileNames": false,
-    "noFallthroughCasesInSwitch": false
+    "noFallthroughCasesInSwitch": false,
+    "esModuleInterop": true
   }
 }
diff --git a/yarn.lock b/yarn.lock
index 4182e0e..dc3d8f2 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1505,6 +1505,11 @@
     "@webassemblyjs/ast" "1.11.6"
     "@xtuc/long" "4.2.2"
 
+"@xmldom/xmldom@^0.8.10":
+  version "0.8.10"
+  resolved "https://registry.yarnpkg.com/@xmldom/xmldom/-/xmldom-0.8.10.tgz#a1337ca426aa61cef9fe15b5b28e340a72f6fa99"
+  integrity sha512-2WALfTl4xo2SkGCYRt6rDTFfk9R1czmBvUQy12gK2KuRKIpWEhcbbzy8EZXtz/jkRqHX8bFEc6FC1HjX4TUWYw==
+
 "@xtuc/ieee754@^1.2.0":
   version "1.2.0"
   resolved "https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz"
@@ -2581,6 +2586,13 @@ doctrine@^3.0.0:
   dependencies:
     esutils "^2.0.2"
 
+docxtemplater@^3.42.4:
+  version "3.42.4"
+  resolved "https://registry.yarnpkg.com/docxtemplater/-/docxtemplater-3.42.4.tgz#577511d793dc661814b5e95d2bef814f01bd15b5"
+  integrity sha512-eZKlTmqK1jCXeKNuJSWpAKJ1FCTgo3D8y/qTJd0JhKsrKW0jseeta+tEgqhxMAqkBz9eejkOBJF01jdFJePBqw==
+  dependencies:
+    "@xmldom/xmldom" "^0.8.10"
+
 dot-prop@^5.1.0:
   version "5.3.0"
   resolved "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz"
@@ -4965,6 +4977,11 @@ packet-reader@1.0.0:
   resolved "https://registry.npmjs.org/packet-reader/-/packet-reader-1.0.0.tgz"
   integrity sha512-HAKu/fG3HpHFO0AA8WE8q2g+gBJaZ9MG7fcKk+IJPLTGAD6Psw4443l+9DGRbOIh3/aXr7Phy0TjilYivJo5XQ==
 
+pako@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/pako/-/pako-2.1.0.tgz#266cc37f98c7d883545d11335c00fbd4062c9a86"
+  integrity sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug==
+
 parent-module@^1.0.0:
   version "1.0.1"
   resolved "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz"
@@ -5164,6 +5181,13 @@ pirates@^4.0.4:
   resolved "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz"
   integrity sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==
 
+pizzip@^3.1.4:
+  version "3.1.4"
+  resolved "https://registry.yarnpkg.com/pizzip/-/pizzip-3.1.4.tgz#0c2578506ce5b487fa00bc2dd62eebeb291ee677"
+  integrity sha512-08yol1Of5Og1E0a1R56c+Z1jVkvfTEBUouwG9WYwCqpj8BjdcpEpLgZsrdLFNQYRgtxK0OOe0JpmBWJdrPr6Dg==
+  dependencies:
+    pako "^2.1.0"
+
 pkg-dir@^4.2.0:
   version "4.2.0"
   resolved "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz"
