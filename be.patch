diff --git a/src/modules/assign/assign.controller.ts b/src/modules/assign/assign.controller.ts
index cb76a95..5cccd93 100644
--- a/src/modules/assign/assign.controller.ts
+++ b/src/modules/assign/assign.controller.ts
@@ -1,24 +1,24 @@
 import {
+  Body,
   Controller,
+  Delete,
   Get,
-  Post,
-  Body,
-  Patch,
   Param,
-  Delete,
+  Patch,
+  Post,
   Query,
 } from '@nestjs/common';
 import { AssignService } from './assign.service';
 import { CreateAssignDto } from './dto/create-assign.dto';
-import { UpdateAssignDto } from './dto/update-assign.dto';
 import { GetAssignParams } from './dto/getList-assign.dto';
+import { UpdateAssignDto } from './dto/update-assign.dto';
 
 @Controller('assign')
 export class AssignController {
   constructor(private readonly assignService: AssignService) {}
 
   @Post()
-  create(@Body() createAssignDto: CreateAssignDto) {
+  create(@Body() createAssignDto: CreateAssignDto[]) {
     return this.assignService.assignEmployeeToProject(createAssignDto);
   }
 
@@ -37,8 +37,8 @@ export class AssignController {
     return this.assignService.update(id, updateAssignDto);
   }
 
-  @Delete(':id')
-  remove(@Param('id') id: string) {
-    return this.assignService.remove(id);
+  @Delete()
+  remove(@Body() data: any) {
+    return this.assignService.remove(data);
   }
 }
diff --git a/src/modules/assign/assign.service.ts b/src/modules/assign/assign.service.ts
index ce784d2..352886d 100644
--- a/src/modules/assign/assign.service.ts
+++ b/src/modules/assign/assign.service.ts
@@ -1,13 +1,13 @@
 import { Injectable } from '@nestjs/common';
-import { CreateAssignDto } from './dto/create-assign.dto';
-import { UpdateAssignDto } from './dto/update-assign.dto';
-import { EmployeeProject } from 'src/entities/employee_project.entity';
-import { EntityManager, Repository } from 'typeorm';
 import { InjectRepository } from '@nestjs/typeorm';
-import { GetAssignParams } from './dto/getList-assign.dto';
-import { Order } from 'src/common/enum/enums';
 import { PageMetaDto } from 'src/common/dtos/pageMeta';
 import { ResponsePaginate } from 'src/common/dtos/responsePaginate';
+import { Order } from 'src/common/enum/enums';
+import { EmployeeProject } from 'src/entities/employee_project.entity';
+import { EntityManager, Repository } from 'typeorm';
+import { CreateAssignDto } from './dto/create-assign.dto';
+import { GetAssignParams } from './dto/getList-assign.dto';
+import { UpdateAssignDto } from './dto/update-assign.dto';
 
 @Injectable()
 export class AssignService {
@@ -17,20 +17,25 @@ export class AssignService {
     private readonly entityManager: EntityManager,
   ) {}
 
-  async assignEmployeeToProject(assignDto: CreateAssignDto) {
-    const { employeeId, projectId, roles, joinDate } = assignDto;
-
-    const employeeProject = new EmployeeProject(assignDto);
-    employeeProject.employeeId = employeeId;
-    employeeProject.projectId = projectId;
-    employeeProject.roles = roles;
-    employeeProject.joinDate = joinDate;
+  async assignEmployeeToProject(assignDtos: CreateAssignDto[]) {
+    // const { employeeId, projectId, roles, joinDate } = assignDto;
+    console.log(assignDtos);
+    const results = [];
+    for (const assignDto of assignDtos) {
+      const { employeeId, projectId, roles, joinDate } = assignDto;
+      const employeeProject = new EmployeeProject(assignDto);
+      employeeProject.employeeId = employeeId;
+      employeeProject.projectId = projectId;
+      employeeProject.roles = roles;
+      employeeProject.joinDate = joinDate;
+      await this.entityManager.save(employeeProject);
+      results.push({
+        employeeProject,
+        message: `Successfully assigned employee ${employeeId} to project ${projectId}`,
+      });
+    }
 
-    await this.entityManager.save(employeeProject);
-    return {
-      employeeProject,
-      message: 'Successfully assign employee into project ',
-    };
+    return results;
   }
 
   async getAssigns(params: GetAssignParams) {
@@ -75,8 +80,25 @@ export class AssignService {
     await this.entityManager.save(project);
   }
 
-  async remove(id: string) {
-    await this.assignRespository.softDelete(id);
-    return { data: null, message: 'Successfully delete assign' };
+  async remove(data: any) {
+    const { employeeIds, projectId } = data;
+    const deleteResult = await this.assignRespository
+      .createQueryBuilder()
+      .delete()
+      .from(EmployeeProject)
+      .where('projectId = :projectId AND employeeId IN (:...employeeIds)', {
+        projectId,
+        employeeIds,
+      })
+      .execute();
+
+    if (deleteResult.affected === 0) {
+      throw new Error('Failed to unassign employee from project');
+    }
+
+    return {
+      data: null,
+      message: 'Successfully unassigned employee from project',
+    };
   }
 }
diff --git a/src/modules/employee/employee.controller.ts b/src/modules/employee/employee.controller.ts
index 6551b0a..5d7d7c1 100644
--- a/src/modules/employee/employee.controller.ts
+++ b/src/modules/employee/employee.controller.ts
@@ -1,19 +1,22 @@
 import {
+  Body,
   Controller,
+  Delete,
   Get,
-  Post,
-  Body,
-  Patch,
+  HttpStatus,
   Param,
-  Delete,
+  Patch,
+  Post,
   Query,
+  Res,
+  ValidationPipe,
 } from '@nestjs/common';
-import { EmployeeService } from './employee.service';
+import { Response } from 'express';
 import { CreateEmployeeDto } from './dto/create-employee.dto';
-import { UpdateEmployeeDto } from './dto/update-employee.dto';
 import { GetEmployeeParams } from './dto/getList_employee.dto';
-import { ValidationPipe } from '@nestjs/common';
 import { GetManagers } from './dto/getManager.dto';
+import { UpdateEmployeeDto } from './dto/update-employee.dto';
+import { EmployeeService } from './employee.service';
 
 @Controller('employee')
 export class EmployeeController {
@@ -27,9 +30,25 @@ export class EmployeeController {
     return { result, message: 'Successfully create new employee' };
   }
 
+  @Get('noPaginate')
+  noPaginate() {
+    return this.employeeService.getEmployeeNoPaginate();
+  }
+
   @Post('cv')
-  generateCv(@Body('id') id: string) {
-    return this.employeeService.generateCv(id);
+  async generateCv(@Body('id') id: string, @Res() res: Response) {
+    try {
+      const docxBuffer = await this.employeeService.generateCv(id);
+      res.setHeader(
+        'Content-Type',
+        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
+      );
+      res.setHeader('Content-Disposition', 'attachment; filename=your_cv.docx');
+      res.status(HttpStatus.OK).send(docxBuffer);
+    } catch (error) {
+      console.error('Error generating CV:', error);
+      res.status(HttpStatus.INTERNAL_SERVER_ERROR).send('Error generating CV');
+    }
   }
 
   @Get('total')
diff --git a/src/modules/employee/employee.service.ts b/src/modules/employee/employee.service.ts
index e7faeb3..d1f567f 100644
--- a/src/modules/employee/employee.service.ts
+++ b/src/modules/employee/employee.service.ts
@@ -98,11 +98,14 @@ export class EmployeeService {
       linebreaks: true,
     });
     doc.render(dataDocx);
+
     const buf = doc.getZip().generate({
       type: 'nodebuffer',
+      platform: 'win32',
       compression: 'DEFLATE',
     });
-    fs.writeFileSync(path.resolve('output.docx'), buf);
+
+    return Buffer.from(buf).toString('hex');
   }
 
   async create(createEmployeeDto: CreateEmployeeDto) {
@@ -196,6 +199,10 @@ export class EmployeeService {
     return { oldCount, currentCount, total, percentageChange };
   }
 
+  async getEmployeeNoPaginate() {
+    return await this.employeesRepository.find();
+  }
+
   async getEmployees(params: GetEmployeeParams) {
     const employees = this.employeesRepository
       .createQueryBuilder('employee')
diff --git a/src/modules/project/dto/update-project.dto.ts b/src/modules/project/dto/update-project.dto.ts
index 4a5d865..797a42e 100644
--- a/src/modules/project/dto/update-project.dto.ts
+++ b/src/modules/project/dto/update-project.dto.ts
@@ -1,4 +1,8 @@
 import { PartialType } from '@nestjs/mapped-types';
 import { CreateProjectDto } from './create-project.dto';
-
-export class UpdateProjectDto extends PartialType(CreateProjectDto) {}
+interface EmployeeRolesUpdate {
+  [employeeId: string]: string[];
+}
+export class UpdateProjectDto extends PartialType(CreateProjectDto) {
+  employeeRoles: EmployeeRolesUpdate;
+}
diff --git a/src/modules/project/project.service.ts b/src/modules/project/project.service.ts
index cf9eb02..df86ba9 100644
--- a/src/modules/project/project.service.ts
+++ b/src/modules/project/project.service.ts
@@ -1,15 +1,15 @@
 import { Injectable, NotFoundException } from '@nestjs/common';
-import { CreateProjectDto } from './dto/create-project.dto';
-import { UpdateProjectDto } from './dto/update-project.dto';
-import { EntityManager, Repository } from 'typeorm';
-import { Project } from '../../entities/project.entity';
 import { InjectRepository } from '@nestjs/typeorm';
-import { GetProjectParams } from './dto/getList-project.dto';
-import { Order, StatusProjectEnum } from 'src/common/enum/enums';
 import { PageMetaDto } from 'src/common/dtos/pageMeta';
 import { ResponsePaginate } from 'src/common/dtos/responsePaginate';
+import { Order, StatusProjectEnum } from 'src/common/enum/enums';
 import { Employee } from 'src/entities/employee.entity';
 import { EmployeeProject } from 'src/entities/employee_project.entity';
+import { EntityManager, Repository } from 'typeorm';
+import { Project } from '../../entities/project.entity';
+import { CreateProjectDto } from './dto/create-project.dto';
+import { GetProjectParams } from './dto/getList-project.dto';
+import { UpdateProjectDto } from './dto/update-project.dto';
 
 @Injectable()
 export class ProjectService {
@@ -18,6 +18,8 @@ export class ProjectService {
     private projectRespository: Repository<Project>,
     @InjectRepository(Employee)
     private employeeRespository: Repository<Employee>,
+    @InjectRepository(EmployeeProject)
+    private assignRespository: Repository<EmployeeProject>,
     private readonly entityManager: EntityManager,
   ) {}
 
@@ -357,6 +359,7 @@ export class ProjectService {
 
   async update(id: string, updateProjectDto: UpdateProjectDto) {
     const project = await this.projectRespository.findOneBy({ id });
+
     project.name = updateProjectDto.name;
     project.managerId = updateProjectDto.managerId;
     project.description = updateProjectDto.description;
@@ -366,6 +369,23 @@ export class ProjectService {
     project.technology = updateProjectDto.technology;
     project.startDate = updateProjectDto.startDate;
     project.endDate = updateProjectDto.endDate;
+
+    if (updateProjectDto.employeeRoles) {
+      for (const employeeId in updateProjectDto.employeeRoles) {
+        const employeeProject = await this.assignRespository.findOne({
+          where: { projectId: id, employeeId },
+        });
+        if (employeeProject) {
+          employeeProject.roles = updateProjectDto.employeeRoles[
+            employeeId
+          ] as any;
+          console.log(employeeProject);
+          await this.entityManager.save(employeeProject);
+        } else {
+        }
+      }
+    }
+
     await this.entityManager.save(project);
     return { project, message: 'Successfully update project' };
   }
